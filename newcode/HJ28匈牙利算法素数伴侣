#include<string.h>
#include<iostream>
#include<vector>
using namespace std;
vector<long int> row_vec,col_vec;
int **myp;//二维状态数组
int row,col;
long int *partener;//列的配对结果
bool *state;//是否遍历
bool issushu(long int num);//判断素数
bool myfind(int m);//匈牙利算法递归区
int main()
{
    int num;
    cin>>num;
    long int now;
    for(int i=0;i<num;i++){
        cin>>now;
        if(now%2==0)
            row_vec.push_back(now);
        else
            col_vec.push_back(now);
    }
    row = row_vec.size();
    col = col_vec.size();
    myp=new int*[row+1];
    for(int i=0;i<=row;i++)
        myp[i] = new int[row+1];
    partener=new long int[col+1];
    memset(partener,0,(col+1)*sizeof(long int));
    state=new bool[col+1];
    for(int i=1;i<=row;i++){
        for(int j=1;j<=col;j++){
            myp[i][j] = issushu(row_vec[i-1]+col_vec[j-1]);
        }
    }
    //以上代码仅仅作数据处理，矩阵构造等。
    
    int count=0;
    for(int i=1;i<=row;i++){//匈牙利算法主程序区
        memset(state,0,col+1);
        if(myfind(i))
            count++;
    }
    cout<<count;
}
bool myfind(int m){//匈牙利算法递归区
    for(int i=1;i<=col;i++){
        if(myp[m][i] && !state[i]){
            state[i]= true;
            if(!partener[i] || myfind(partener[i])){
                partener[i] = m;
                return true;
            }
        }
    }
    return false;
}
bool issushu(long int num)//素数判断
{
    for(int i=2;i*i<=num;i++)
        if(num%i==0)
            return 0;//不是素数
    return 1;
}
