#include<string.h>
#include<iostream>
#include<vector>
using namespace std;
vector<long int> jishu,oushu;
int **p1;//二维数组指针
int row,col;
bool issushu(long int);//判断素数
int *part;//记录偶数的伴侣位置 列的配对结果
bool *visit;//记录偶数是否访问 是否遍历
bool xunyali(int row);//匈牙利算法递归区
int main() {
    int num;//输入的数字个数
    cin >> num;
    long int now;
    for (int i = 0; i < num; i++) {
        cin >> now;
        if (now % 2 == 1)
            jishu.push_back(now);
        else
            oushu.push_back(now);
    }//奇偶分别放进两个列表
    row = jishu.size() + 1;//奇数作行
    col = oushu.size() + 1;//偶数作列
    part = new int[col];
    visit = new bool[col];
    memset(part,0,col*sizeof(int));
    p1 = new int *[row];//行
    for (int i = 0; i < row; i++)
        p1[i] = new int[col];
    for(int i=1;i<row;i++){
        for (int j = 1; j < col; ++j) {
            p1[i][j] = issushu(jishu[i-1]+oushu[j-1]);
        }
    }
    //以上代码仅仅作数据处理，矩阵构造等。
    int count=0;
    for(int i=1;i<row;i++){//匈牙利算法递归区
        memset(visit,0,col*sizeof(bool));
        if(xunyali(i))
            count++;
    }
    cout<<count;
}
bool xunyali(int row){//匈牙利算法
    for(int i=1;i<col;i++)
    {
        if(p1[row][i] && !visit[i]){
            visit[i] = true;
            if(!part[i] || xunyali(part[i])){
                part[i] = row;
                return true;
            }
        }
    }
    return false;
}
bool issushu(long int a){//素数判断
    for(int i=2;i*i<=a;i++) {
        if (a % i == 0)
            return false;
    }
    return true;
}
